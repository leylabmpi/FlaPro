# import 
from __future__ import print_function
import os
import re
import gzip
import socket
import getpass
import numpy as np
import pandas as pd


# setup
configfile: 'config.yaml'

## pipeline utils
snake_dir = config['pipeline']['snakemake_folder'] #good
include: snake_dir + 'bin/ll_pipeline_utils/Snakefile' #good
#print("Including Snakefile from: " + snake_dir + 'bin/ll_pipeline_utils/Snakefile')

config_default(config, 'pipeline', 'name') 

## outdir
config['output_dir'] = config['output_dir'].rstrip('/') + '/'

## Samples table
if not os.path.isfile(config['samples_file']):
    raise IOError('Cannot find file: {}'.format(config['samples_file']))
config['samples'] = pd.read_csv(config['samples_file'], sep='\t', comment='#')
config['samples']['Sample'].replace('[^a-zA-Z0-9_-]+', '_', regex=True, inplace=True)
config['samples'] = config['samples'].set_index(config['samples'].Sample)

print(config['samples'], file=sys.stderr)

config['samples_unique'] = config['samples'].Sample.unique().tolist()

config['pipeline']['username'] = getpass.getuser()
config['pipeline']['email'] = config['pipeline']['username'] + '@tuebingen.mpg.de'
config['tmp_dir'] = os.path.join(config['tmp_dir'], config['pipeline']['username'])
config['tmp_dir'] = os.path.join(config['tmp_dir'], 'LLHFP_' + str(os.stat('.').st_ino) + '/')
sys.stderr.write('\33[33mUsing temporary directory: {} \x1b[0m\n'.format(config['tmp_dir'])) # yellow

if not os.path.isdir(config['tmp_dir']):
    os.makedirs(config['tmp_dir'])


# Checking single paired reads
if 'Read2' in config['samples'].columns and not config['samples']['Read2'].isnull().all():
    config['paired_end_reads'] = True
else:
    config['paired_end_reads'] = False
    msg = 'WARNING: Read2 column not found or no files paths in the column; assuming single-end reads!'
    print(msg, file=sys.stderr)

### check that read files exist
for index,row in config['samples'].iterrows():
    file_cols = ['Read1']

    #if config['paired_end_reads'] == True:
    #    file_cols.append('Read2')
    file_cols.append('Read2')

    for f in file_cols:
        try:
            #print("---", file=sys.stderr)
            #print(str(row[f]), file=sys.stderr)
            #print("---", file=sys.stderr)
            #if not os.path.isfile(str(row[f])):            
            if pd.notna(row[f]) and not os.path.isfile(str(row[f])):
                msg = 'Column={}, Sample={} ==> Cannot find file: {}'
                raise ValueError(msg.format(f, row['Sample'], row[f]))
        except TypeError:
            msg = 'Samples table, column {}, row {} => {}'
            raise TypeError(msg.format(f, index, row[f]))


### adding file path to reads
if config['read_file_path'].lower() == 'none':
    pass
else:
    config['read_file_path'] = config['read_file_path'].rstrip('/') + '/'
    config['samples']['Read1'] = config['read_file_path'] + config['samples']['Read1'].astype(str)
    if config['paired_end_reads'] == True:
        config['samples']['Read2'] = config['read_file_path'] + config['samples']['Read2'].astype(str)
    else:
        config['samples']['Read2'] = ""
    fi

## including modular snakefiles
include: snake_dir + 'bin/dirs'
include: snake_dir + 'bin/Snakefile'
include: snake_dir + 'bin/ShortBRED_quantify/Snakefile'
include: snake_dir + 'bin/alpha_div/Snakefile'

## local rules
localrules: all

rule all:
    input:
        which_input